import { ExposedComponent } from '@hashbrownai/core';
import { useEffect, useMemo } from 'react';
import { BoundTool } from '../create-tool.fn';
import { useUiChat } from '../hooks/use-ui-chat';

/**
 * Options for configuring the UI completion component.
 */
interface UiCompletionOptions {
  /**
   * The LLM model to use for generating UI elements.
   * @example 'gpt-4'
   */
  model: string;

  /**
   * The initial prompt to send to the ai to generate the UI.
   * This prompt should describe the UI elements you want to generate.
   * @example 'Create a list of profile cards for the users'
   */
  prompt: string;

  /**
   * The tools available for the ai to use during UI generation.
   * These tools can be used to fetch data or perform actions that influence the UI.
   * @default []
   */
  tools: BoundTool<string, any>[];

  /**
   * React components that can be used to generate the ui by the ai.
   * These components will be available for the ai to use when generating UI.
   * @default []
   */
  components: ExposedComponent<any>[];
}

/**
 * A React component that renders UI elements generated by an ai.
 * It automatically sends the initial prompt and renders the assistant's response
 * as React elements.
 *
 * @example
 * ```tsx
 * const MyUI = () => {
 *   return (
 *     <UiCompletion
 *       model="gpt-4"
 *       prompt="Create a list of profile cards for the users"
 *       tools={[
 *         createTool({
 *           name: 'get_users',
 *           description: 'Get the list of users',
 *           handler: () => users
 *         }),
 *       ]}
 *       components={[
 *         exposeComponent(ProfileCard, {
 *           name: 'ProfileCard',
 *           description: 'A component that displays a user information',
 *           props: {
 *             userId: s.string('The id of the user'),
 *           },
 *         }),
 *       ]}
 *     />
 *   );
 * };
 * ```
 */
export const UiCompletion = ({
  model,
  prompt,
  tools,
  components,
}: UiCompletionOptions) => {
  const { sendMessage, messages } = useUiChat({
    model,
    tools,
    components,
  });

  useEffect(() => {
    if (messages.length === 0) {
      sendMessage({
        role: 'user',
        content: prompt,
      });
    }
  }, [sendMessage, prompt, messages.length]);

  const ui = useMemo(() => {
    const lastMessage = messages[messages.length - 1];

    if (
      lastMessage &&
      lastMessage.role === 'assistant' &&
      lastMessage.content
    ) {
      return lastMessage.content;
    }
    return null;
  }, [messages]);

  if (!ui) return null;

  return ui as React.ReactNode;
};

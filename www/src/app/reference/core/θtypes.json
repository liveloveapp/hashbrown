{
  "name": "ɵtypes",
  "canonicalReference": "@hashbrownai/core!ɵtypes:namespace",
  "kind": "Namespace",
  "fileUrlPath": "../packages/core/src/public_api.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Namespace",
      "canonicalReference": "@hashbrownai/core!ɵtypes:namespace",
      "docComment": "",
      "excerptTokens": [],
      "fileUrlPath": "../packages/core/src/public_api.ts",
      "releaseTag": "None",
      "name": "ɵtypes",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@hashbrownai/core!ɵtypes.CleanInterfaceShape:type",
          "docComment": "/**\n * This is a mysterious little helper found in the Zod codebase. If you read the implementation, you'd think that it is stripping question marks from the keys of an object. While that's technically true, we never use it to actually strip question marks.\n *\n * Instead, it works a lot like `Prettify`. In our schema library, we support cycles using getters:\n * ```ts\n * const node = s.object({\n *   tagName: s.string(),\n *   get children() {\n *     return s.array('children', node);\n *   }\n * })\n * ```\n *\n * However, once we use `s.Infer` on this, for some reason, the TypeScript language service doesn't print the correct type for the `children` property. Strangely, it's just a printing error, the type is actually correct.\n *\n * This helper cleans the type so that it prints correctly.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CleanInterfaceShape<T extends "
            },
            { "kind": "Content", "text": "object" },
            { "kind": "Content", "text": "> = " },
            {
              "kind": "Reference",
              "text": "Identity",
              "canonicalReference": "@hashbrownai/core!ɵtypes.Identity:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    [k in keyof T as k extends `${infer K}?` ? K : k extends `?${infer K}` ? K : k]: T[k];\n}>"
            },
            { "kind": "Content", "text": ";" }
          ],
          "fileUrlPath": "../packages/core/src/utils/types.ts",
          "releaseTag": "Public",
          "name": "CleanInterfaceShape",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "typeTokenRange": { "startIndex": 3, "endIndex": 5 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "This is a mysterious little helper found in the Zod codebase. If you read the implementation, you'd think that it is stripping question marks from the keys of an object. While that's technically true, we never use it to actually strip question marks.\n\nInstead, it works a lot like `Prettify`. In our schema library, we support cycles using getters:\n```ts\nconst node = s.object({\n  tagName: s.string(),\n  get children() {\n    return s.array('children', node);\n  }\n})\n```\n\nHowever, once we use `s.Infer` on this, for some reason, the TypeScript language service doesn't print the correct type for the `children` property. Strangely, it's just a printing error, the type is actually correct.\n\nThis helper cleans the type so that it prints correctly.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@hashbrownai/core!ɵtypes.DeepPartial:type",
          "docComment": "/**\n * A utility type that makes all properties of a type `T` optional. This type is useful for creating partial types, which can be useful for various type operations.\n *\n * @template T - The type to be made partial.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "export type DeepPartial<T> = " },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof T]?: T[P] extends object ? "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "@hashbrownai/core!ɵtypes.DeepPartial:type"
            },
            { "kind": "Content", "text": "<T[P]> : T[P];\n}" },
            { "kind": "Content", "text": ";" }
          ],
          "fileUrlPath": "../packages/core/src/utils/types.ts",
          "releaseTag": "Public",
          "name": "DeepPartial",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "typeTokenRange": { "startIndex": 1, "endIndex": 4 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "A utility type that makes all properties of a type `T` optional. This type is useful for creating partial types, which can be useful for various type operations.\n\n@template T - The type to be made partial.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@hashbrownai/core!ɵtypes.Flatten:type",
          "docComment": "/**\n * A utility type that flattens a given type `T` by mapping over its keys and returning a new type with the same properties. This type is useful for simplifying complex type structures, making them easier to read and understand.\n *\n * @template T - The type to be flattened.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "export type Flatten<T> = " },
            {
              "kind": "Reference",
              "text": "Identity",
              "canonicalReference": "@hashbrownai/core!ɵtypes.Identity:type"
            },
            { "kind": "Content", "text": "<{\n    [k in keyof T]: T[k];\n}>" },
            { "kind": "Content", "text": ";" }
          ],
          "fileUrlPath": "../packages/core/src/utils/types.ts",
          "releaseTag": "Public",
          "name": "Flatten",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "typeTokenRange": { "startIndex": 1, "endIndex": 3 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "A utility type that flattens a given type `T` by mapping over its keys and returning a new type with the same properties. This type is useful for simplifying complex type structures, making them easier to read and understand.\n\n@template T - The type to be flattened.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@hashbrownai/core!ɵtypes.Identity:type",
          "docComment": "/**\n * A utility type that returns the type it receives as input. This type is often used to force TypeScript to evaluate and simplify complex types, making them easier to read and understand.\n *\n * @template T - The type to be returned as is.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "export type Identity<T> = " },
            { "kind": "Content", "text": "T" },
            { "kind": "Content", "text": ";" }
          ],
          "fileUrlPath": "../packages/core/src/utils/types.ts",
          "releaseTag": "Public",
          "name": "Identity",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "typeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "A utility type that returns the type it receives as input. This type is often used to force TypeScript to evaluate and simplify complex types, making them easier to read and understand.\n\n@template T - The type to be returned as is.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@hashbrownai/core!ɵtypes.IsStringUnion:type",
          "docComment": "",
          "excerptTokens": [
            { "kind": "Content", "text": "export type IsStringUnion<T> = " },
            {
              "kind": "Reference",
              "text": "IsUnion",
              "canonicalReference": "@hashbrownai/core!ɵtypes.IsUnion:type"
            },
            {
              "kind": "Content",
              "text": "<T> extends true ? (T extends string ? true : false) : false"
            },
            { "kind": "Content", "text": ";" }
          ],
          "fileUrlPath": "../packages/core/src/utils/types.ts",
          "releaseTag": "Public",
          "name": "IsStringUnion",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "typeTokenRange": { "startIndex": 1, "endIndex": 3 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@hashbrownai/core!ɵtypes.IsUnion:type",
          "docComment": "/**\n * A utility type that checks if a type `T` is a union. This type is useful for determining if a type is a union and for converting a union to an intersection.\n *\n * @template T - The type to be checked.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "export type IsUnion<T, U = " },
            { "kind": "Content", "text": "T" },
            { "kind": "Content", "text": "> = " },
            {
              "kind": "Content",
              "text": "T extends any ? [U] extends [T] ? false : true : never"
            },
            { "kind": "Content", "text": ";" }
          ],
          "fileUrlPath": "../packages/core/src/utils/types.ts",
          "releaseTag": "Public",
          "name": "IsUnion",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 1, "endIndex": 2 }
            }
          ],
          "typeTokenRange": { "startIndex": 3, "endIndex": 4 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "A utility type that checks if a type `T` is a union. This type is useful for determining if a type is a union and for converting a union to an intersection.\n\n@template T - The type to be checked.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@hashbrownai/core!ɵtypes.LastOf:type",
          "docComment": "/**\n * A utility type that returns the last element of a union type. This type is useful for extracting the last element from a union, which can be useful for various type operations.\n *\n * @template T - The union type to be processed.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "export type LastOf<T> = " },
            {
              "kind": "Reference",
              "text": "UnionToIntersection",
              "canonicalReference": "@hashbrownai/core!ɵtypes.UnionToIntersection:type"
            },
            {
              "kind": "Content",
              "text": "<T extends any ? (x: T) => any : never> extends (x: infer L) => any ? L : never"
            },
            { "kind": "Content", "text": ";" }
          ],
          "fileUrlPath": "../packages/core/src/utils/types.ts",
          "releaseTag": "Public",
          "name": "LastOf",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "typeTokenRange": { "startIndex": 1, "endIndex": 3 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "A utility type that returns the last element of a union type. This type is useful for extracting the last element from a union, which can be useful for various type operations.\n\n@template T - The union type to be processed.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@hashbrownai/core!ɵtypes.Prettify:type",
          "docComment": "/**\n * A utility type that takes a type `T` and returns a new type with the same properties as `T`. This type is primarily used to improve the readability of complex type definitions by expanding them into a more human-readable form.\n *\n * @template T - The type to be prettified.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "export type Prettify<T> = " },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof T]: T[K];\n} & {}"
            },
            { "kind": "Content", "text": ";" }
          ],
          "fileUrlPath": "../packages/core/src/utils/types.ts",
          "releaseTag": "Public",
          "name": "Prettify",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "typeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "A utility type that takes a type `T` and returns a new type with the same properties as `T`. This type is primarily used to improve the readability of complex type definitions by expanding them into a more human-readable form.\n\n@template T - The type to be prettified.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@hashbrownai/core!ɵtypes.UnionToIntersection:type",
          "docComment": "/**\n * A utility type that converts a union type `U` to an intersection type. This type is useful for converting a union to an intersection, which can be useful for various type operations.\n *\n * @template U - The union type to be converted.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UnionToIntersection<U> = "
            },
            {
              "kind": "Content",
              "text": "(U extends any ? (x: U) => any : never) extends (x: infer I) => any ? I : never"
            },
            { "kind": "Content", "text": ";" }
          ],
          "fileUrlPath": "../packages/core/src/utils/types.ts",
          "releaseTag": "Public",
          "name": "UnionToIntersection",
          "typeParameters": [
            {
              "typeParameterName": "U",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "typeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "A utility type that converts a union type `U` to an intersection type. This type is useful for converting a union to an intersection, which can be useful for various type operations.\n\n@template U - The union type to be converted.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@hashbrownai/core!ɵtypes.UnionToTuple:type",
          "docComment": "/**\n * A utility type that converts a union type `T` to a tuple. This type is useful for converting a union to a tuple, which can be useful for various type operations.\n *\n * @template T - The union type to be converted.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "export type UnionToTuple<T, L = " },
            {
              "kind": "Reference",
              "text": "LastOf",
              "canonicalReference": "@hashbrownai/core!ɵtypes.LastOf:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": "> = " },
            { "kind": "Content", "text": "[T] extends [never] ? [] : [..." },
            {
              "kind": "Reference",
              "text": "UnionToTuple",
              "canonicalReference": "@hashbrownai/core!ɵtypes.UnionToTuple:type"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            { "kind": "Content", "text": "<T, L>>, L]" },
            { "kind": "Content", "text": ";" }
          ],
          "fileUrlPath": "../packages/core/src/utils/types.ts",
          "releaseTag": "Public",
          "name": "UnionToTuple",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            },
            {
              "typeParameterName": "L",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 1, "endIndex": 3 }
            }
          ],
          "typeTokenRange": { "startIndex": 4, "endIndex": 9 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "A utility type that converts a union type `T` to a tuple. This type is useful for converting a union to a tuple, which can be useful for various type operations.\n\n@template T - The union type to be converted.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        }
      ],
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": []
      }
    }
  ]
}

{
  "name": "createToolWithArgs",
  "canonicalReference": "@hashbrownai/react!createToolWithArgs:function",
  "kind": "Function",
  "fileUrlPath": "../dist/packages/react/create-tool.fn.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!createToolWithArgs:function(1)",
      "docComment": "/**\n * This function creates a tool for the LLM to use that can use arguments.\n *\n * @returns {Chat.Tool<Name, s.Infer<Schema>, Result>} - A tool that the LLM can use.\n *\n * @example\n * ```ts\n * createToolWithArgs({\n *   name: 'checkTodoItem',\n *   description: 'Check a todo item',\n *   schema: s.object('Check todo item input', {\n *     id: s.string('The id of the todo item'),\n *   }),\n *   handler: (input) => checkTodoItem(input),\n * });\n * ```\n *\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function createToolWithArgs<const Name extends "
        },
        { "kind": "Content", "text": "string" },
        { "kind": "Content", "text": ", Schema extends " },
        {
          "kind": "Reference",
          "text": "s.HashbrownType",
          "canonicalReference": "!s.HashbrownType:type"
        },
        { "kind": "Content", "text": ", Result>(input: " },
        {
          "kind": "Reference",
          "text": "CreateToolWithArgsInput",
          "canonicalReference": "@hashbrownai/react!~CreateToolWithArgsInput:interface"
        },
        { "kind": "Content", "text": "<Name, Schema, Result>" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "Chat.Tool",
          "canonicalReference": "!Chat.Tool:type"
        },
        { "kind": "Content", "text": "<Name, " },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<Schema>, Result>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/create-tool.fn.d.ts",
      "returnTypeTokenRange": { "startIndex": 8, "endIndex": 12 },
      "releaseTag": "Public",
      "overloadIndex": 1,
      "parameters": [
        {
          "parameterName": "input",
          "parameterTypeTokenRange": { "startIndex": 5, "endIndex": 7 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "Name",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "Schema",
          "constraintTokenRange": { "startIndex": 3, "endIndex": 4 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "Result",
          "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "createToolWithArgs",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "This function creates a tool for the LLM to use that can use arguments.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": " {Chat.Tool<Name, s.Infer<Schema>, Result>} - A tool that the LLM can use.\n\n",
        "see": [],
        "params": [],
        "examples": [
          "\n```ts\ncreateToolWithArgs({\n  name: 'checkTodoItem',\n  description: 'Check a todo item',\n  schema: s.object('Check todo item input', {\n    id: s.string('The id of the todo item'),\n  }),\n  handler: (input) => checkTodoItem(input),\n});\n```\n\n"
        ]
      }
    }
  ]
}

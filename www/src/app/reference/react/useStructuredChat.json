{
  "name": "useStructuredChat",
  "canonicalReference": "@hashbrownai/react!useStructuredChat:function",
  "kind": "Function",
  "fileUrlPath": "../dist/packages/react/hooks/use-structured-chat.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!useStructuredChat:function(1)",
      "docComment": "/**\n * This React hook creates a chat instance used to interact with the LLM. The result object contains functions and state enabling you to send and receive messages and monitor the state of the chat.\n *\n * @description The `useStructuredChat` hook provides functionality for structured chats. Structured chats are used when you want to use the LLM to generate structured data according to a defined schema. This is particularly useful for: - Generating typed data structures - Creating form responses - Building UI components - Extracting information into a specific format\n *\n * @returns {UseStructuredChatResult} An object containing chat state and functions to interact with the chat.\n *\n * @example\n *\n * In this example, the LLM will respond with a JSON object containing the translations of the input message into English, Spanish, and French.\n * ```tsx\n * const { messages, sendMessage } = useStructuredChat({\n *   model: 'gpt-4o',\n *   system: 'You are a helpful translator that provides accurate translations.',\n *   schema: s.object('Translations', {\n *     english: s.string('English translation'),\n *     spanish: s.string('Spanish translation'),\n *     french: s.string('French translation')\n *   }),\n * });\n * ```\n *\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function useStructuredChat<Schema extends "
        },
        {
          "kind": "Reference",
          "text": "s.HashbrownType",
          "canonicalReference": "!s.HashbrownType:type"
        },
        { "kind": "Content", "text": ", Tools extends " },
        {
          "kind": "Reference",
          "text": "Chat.AnyTool",
          "canonicalReference": "!Chat.AnyTool:type"
        },
        { "kind": "Content", "text": ", Output extends " },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<Schema>" },
        { "kind": "Content", "text": " = " },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<Schema>" },
        { "kind": "Content", "text": ">(options: " },
        {
          "kind": "Reference",
          "text": "UseStructuredChatOptions",
          "canonicalReference": "@hashbrownai/react!UseStructuredChatOptions:interface"
        },
        { "kind": "Content", "text": "<Schema, Tools, Output>" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "UseStructuredChatResult",
          "canonicalReference": "@hashbrownai/react!UseStructuredChatResult:interface"
        },
        { "kind": "Content", "text": "<Output, Tools>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/hooks/use-structured-chat.d.ts",
      "returnTypeTokenRange": { "startIndex": 14, "endIndex": 16 },
      "releaseTag": "Public",
      "overloadIndex": 1,
      "parameters": [
        {
          "parameterName": "options",
          "parameterTypeTokenRange": { "startIndex": 11, "endIndex": 13 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "Schema",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "Tools",
          "constraintTokenRange": { "startIndex": 3, "endIndex": 4 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "Output",
          "constraintTokenRange": { "startIndex": 5, "endIndex": 7 },
          "defaultTypeTokenRange": { "startIndex": 8, "endIndex": 10 }
        }
      ],
      "name": "useStructuredChat",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "This React hook creates a chat instance used to interact with the LLM. The result object contains functions and state enabling you to send and receive messages and monitor the state of the chat.\n\n The `useStructuredChat` hook provides functionality for structured chats. Structured chats are used when you want to use the LLM to generate structured data according to a defined schema. This is particularly useful for: - Generating typed data structures - Creating form responses - Building UI components - Extracting information into a specific format\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": " {UseStructuredChatResult} An object containing chat state and functions to interact with the chat.\n\n",
        "see": [],
        "params": [],
        "examples": [
          "\n\nIn this example, the LLM will respond with a JSON object containing the translations of the input message into English, Spanish, and French.\n```tsx\nconst { messages, sendMessage } = useStructuredChat({\n  model: 'gpt-4o',\n  system: 'You are a helpful translator that provides accurate translations.',\n  schema: s.object('Translations', {\n    english: s.string('English translation'),\n    spanish: s.string('Spanish translation'),\n    french: s.string('French translation')\n  }),\n});\n```\n\n"
        ]
      }
    }
  ]
}

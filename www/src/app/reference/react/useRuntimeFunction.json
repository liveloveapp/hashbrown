{
  "name": "useRuntimeFunction",
  "canonicalReference": "@hashbrownai/react!useRuntimeFunction:function",
  "kind": "Function",
  "fileUrlPath": "../dist/packages/react/src/hooks/use-runtime-function.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!useRuntimeFunction:function(1)",
      "docComment": "/**\n * Creates a function with an input schema.\n *\n * @param cfg - The configuration for the function.\n *\n * @param  - cfg.name - The name of the function.\n *\n * @param  - cfg.description - The description of the function.\n *\n * @param  - cfg.args - The input schema of the function.\n *\n * @param  - cfg.result - The result schema of the function.\n *\n * @param  - cfg.handler - The handler of the function.\n *\n * @param  - cfg.deps - The dependencies of the function.\n *\n * @returns The function reference.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function useRuntimeFunction<ArgsSchema extends "
        },
        {
          "kind": "Reference",
          "text": "s.HashbrownType",
          "canonicalReference": "!s.HashbrownType:type"
        },
        { "kind": "Content", "text": ", ResultSchema extends " },
        {
          "kind": "Reference",
          "text": "s.HashbrownType",
          "canonicalReference": "!s.HashbrownType:type"
        },
        { "kind": "Content", "text": ">(cfg: " },
        {
          "kind": "Content",
          "text": "{\n    name: string;\n    description: string;\n    deps: "
        },
        {
          "kind": "Reference",
          "text": "DependencyList",
          "canonicalReference": "@types/react!React.DependencyList:type"
        },
        {
          "kind": "Content",
          "text": ";\n    args: ArgsSchema;\n    result: ResultSchema;\n    handler: (input: "
        },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<ArgsSchema>, abortSignal?: " },
        {
          "kind": "Reference",
          "text": "AbortSignal",
          "canonicalReference": "!AbortSignal:interface"
        },
        { "kind": "Content", "text": ") => " },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<ResultSchema> | " },
        {
          "kind": "Reference",
          "text": "Promise",
          "canonicalReference": "!Promise:interface"
        },
        { "kind": "Content", "text": "<" },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<ResultSchema>>;\n}" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "RuntimeFunctionRef",
          "canonicalReference": "!unknown"
        },
        { "kind": "Content", "text": "<" },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<ArgsSchema>, " },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<ResultSchema>>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/src/hooks/use-runtime-function.d.ts",
      "returnTypeTokenRange": { "startIndex": 19, "endIndex": 25 },
      "releaseTag": "Public",
      "overloadIndex": 1,
      "parameters": [
        {
          "parameterName": "cfg",
          "parameterTypeTokenRange": { "startIndex": 5, "endIndex": 18 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "ArgsSchema",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "ResultSchema",
          "constraintTokenRange": { "startIndex": 3, "endIndex": 4 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "useRuntimeFunction",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Creates a function with an input schema.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": " The function reference.\n",
        "see": [],
        "params": [
          {
            "name": "cfg",
            "description": "The configuration for the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.name - The name of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.description - The description of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.args - The input schema of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.result - The result schema of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.handler - The handler of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.deps - The dependencies of the function.\n\n"
          }
        ],
        "examples": []
      },
      "formattedContent": "export declare function useRuntimeFunction<\n  ArgsSchema extends  s.HashbrownType ,\n  ResultSchema extends  s.HashbrownType ,\n>(cfg: {\n  name: string;\n  description: string;\n  deps:  DependencyList ;\n  args: ArgsSchema;\n  result: ResultSchema;\n  handler: (\n    input:  s.Infer <ArgsSchema>,\n    abortSignal?:  AbortSignal ,\n  ) => \n    | s.Infer <ResultSchema>\n    |  Promise <\n         s.Infer <ResultSchema>\n      >;\n}):  RuntimeFunctionRef <\n   s.Infer <ArgsSchema>,\n   s.Infer <ResultSchema>\n>;",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "export declare function useRuntimeFunction<\n  ArgsSchema extends "
        },
        {
          "kind": "Reference",
          "text": " s.HashbrownType ",
          "canonicalReference": "!s.HashbrownType:type"
        },
        { "kind": "Content", "text": ",\n  ResultSchema extends " },
        {
          "kind": "Reference",
          "text": " s.HashbrownType ",
          "canonicalReference": "!s.HashbrownType:type"
        },
        {
          "kind": "Content",
          "text": ",\n>(cfg: {\n  name: string;\n  description: string;\n  deps: "
        },
        {
          "kind": "Reference",
          "text": " DependencyList ",
          "canonicalReference": "@types/react!React.DependencyList:type"
        },
        {
          "kind": "Content",
          "text": ";\n  args: ArgsSchema;\n  result: ResultSchema;\n  handler: (\n    input: "
        },
        {
          "kind": "Reference",
          "text": " s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <ArgsSchema>,\n    abortSignal?: " },
        {
          "kind": "Reference",
          "text": " AbortSignal ",
          "canonicalReference": "!AbortSignal:interface"
        },
        { "kind": "Content", "text": ",\n  ) => " },
        {
          "kind": "Reference",
          "text": "\n    | s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <ResultSchema>\n    | " },
        {
          "kind": "Reference",
          "text": " Promise",
          "canonicalReference": "!Promise:interface"
        },
        { "kind": "Content", "text": " <\n        " },
        {
          "kind": "Reference",
          "text": " s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <ResultSchema>\n      >;\n}): " },
        { "kind": "Content", "text": " RuntimeFunctionRef" },
        { "kind": "Content", "text": " <\n  " },
        {
          "kind": "Reference",
          "text": " s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <ArgsSchema>,\n  " },
        {
          "kind": "Reference",
          "text": " s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <ResultSchema>\n>;" }
      ]
    },
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!useRuntimeFunction:function(2)",
      "docComment": "/**\n * Creates a function without an input schema.\n *\n * @param cfg - The configuration for the function.\n *\n * @param  - cfg.name - The name of the function.\n *\n * @param  - cfg.description - The description of the function.\n *\n * @param  - cfg.result - The result schema of the function.\n *\n * @param  - cfg.handler - The handler of the function.\n *\n * @param  - cfg.deps - The dependencies of the function.\n *\n * @returns The function reference.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function useRuntimeFunction<ResultSchema extends "
        },
        {
          "kind": "Reference",
          "text": "s.HashbrownType",
          "canonicalReference": "!s.HashbrownType:type"
        },
        { "kind": "Content", "text": ">(cfg: " },
        {
          "kind": "Content",
          "text": "{\n    name: string;\n    description: string;\n    deps: "
        },
        {
          "kind": "Reference",
          "text": "DependencyList",
          "canonicalReference": "@types/react!React.DependencyList:type"
        },
        {
          "kind": "Content",
          "text": ";\n    result: ResultSchema;\n    handler: (abortSignal?: "
        },
        {
          "kind": "Reference",
          "text": "AbortSignal",
          "canonicalReference": "!AbortSignal:interface"
        },
        { "kind": "Content", "text": ") => " },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<ResultSchema> | " },
        {
          "kind": "Reference",
          "text": "Promise",
          "canonicalReference": "!Promise:interface"
        },
        { "kind": "Content", "text": "<" },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<ResultSchema>>;\n}" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "RuntimeFunctionRef",
          "canonicalReference": "!unknown"
        },
        { "kind": "Content", "text": "<null, " },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<ResultSchema>>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/src/hooks/use-runtime-function.d.ts",
      "returnTypeTokenRange": { "startIndex": 15, "endIndex": 19 },
      "releaseTag": "Public",
      "overloadIndex": 2,
      "parameters": [
        {
          "parameterName": "cfg",
          "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 14 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "ResultSchema",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "useRuntimeFunction",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Creates a function without an input schema.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": " The function reference.\n",
        "see": [],
        "params": [
          {
            "name": "cfg",
            "description": "The configuration for the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.name - The name of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.description - The description of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.result - The result schema of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.handler - The handler of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.deps - The dependencies of the function.\n\n"
          }
        ],
        "examples": []
      },
      "formattedContent": "export declare function useRuntimeFunction<\n  ResultSchema extends  s.HashbrownType ,\n>(cfg: {\n  name: string;\n  description: string;\n  deps:  DependencyList ;\n  result: ResultSchema;\n  handler: (\n    abortSignal?:  AbortSignal ,\n  ) => \n    | s.Infer <ResultSchema>\n    |  Promise <\n         s.Infer <ResultSchema>\n      >;\n}):  RuntimeFunctionRef <\n  null,\n   s.Infer <ResultSchema>\n>;",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "export declare function useRuntimeFunction<\n  ResultSchema extends "
        },
        {
          "kind": "Reference",
          "text": " s.HashbrownType ",
          "canonicalReference": "!s.HashbrownType:type"
        },
        {
          "kind": "Content",
          "text": ",\n>(cfg: {\n  name: string;\n  description: string;\n  deps: "
        },
        {
          "kind": "Reference",
          "text": " DependencyList ",
          "canonicalReference": "@types/react!React.DependencyList:type"
        },
        {
          "kind": "Content",
          "text": ";\n  result: ResultSchema;\n  handler: (\n    abortSignal?: "
        },
        {
          "kind": "Reference",
          "text": " AbortSignal ",
          "canonicalReference": "!AbortSignal:interface"
        },
        { "kind": "Content", "text": ",\n  ) => " },
        {
          "kind": "Reference",
          "text": "\n    | s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <ResultSchema>\n    | " },
        {
          "kind": "Reference",
          "text": " Promise",
          "canonicalReference": "!Promise:interface"
        },
        { "kind": "Content", "text": " <\n        " },
        {
          "kind": "Reference",
          "text": " s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <ResultSchema>\n      >;\n}): " },
        { "kind": "Content", "text": " RuntimeFunctionRef" },
        { "kind": "Content", "text": " <\n  null,\n  " },
        {
          "kind": "Reference",
          "text": " s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <ResultSchema>\n>;" }
      ]
    },
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!useRuntimeFunction:function(3)",
      "docComment": "/**\n * Creates a function with an input schema.\n *\n * @param cfg - The configuration for the function.\n *\n * @param  - cfg.name - The name of the function.\n *\n * @param  - cfg.description - The description of the function.\n *\n * @param  - cfg.args - The args schema of the function.\n *\n * @param  - cfg.handler - The handler of the function.\n *\n * @param  - cfg.deps - The dependencies of the function.\n *\n * @returns The function reference.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function useRuntimeFunction<ArgsSchema extends "
        },
        {
          "kind": "Reference",
          "text": "s.HashbrownType",
          "canonicalReference": "!s.HashbrownType:type"
        },
        { "kind": "Content", "text": ">(cfg: " },
        {
          "kind": "Content",
          "text": "{\n    name: string;\n    description: string;\n    deps: "
        },
        {
          "kind": "Reference",
          "text": "DependencyList",
          "canonicalReference": "@types/react!React.DependencyList:type"
        },
        {
          "kind": "Content",
          "text": ";\n    args: ArgsSchema;\n    handler: (args: "
        },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<ArgsSchema>, abortSignal?: " },
        {
          "kind": "Reference",
          "text": "AbortSignal",
          "canonicalReference": "!AbortSignal:interface"
        },
        { "kind": "Content", "text": ") => void | " },
        {
          "kind": "Reference",
          "text": "Promise",
          "canonicalReference": "!Promise:interface"
        },
        { "kind": "Content", "text": "<void>;\n}" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "RuntimeFunctionRef",
          "canonicalReference": "!unknown"
        },
        { "kind": "Content", "text": "<" },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<ArgsSchema>, void>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/src/hooks/use-runtime-function.d.ts",
      "returnTypeTokenRange": { "startIndex": 13, "endIndex": 17 },
      "releaseTag": "Public",
      "overloadIndex": 3,
      "parameters": [
        {
          "parameterName": "cfg",
          "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 12 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "ArgsSchema",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "useRuntimeFunction",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Creates a function with an input schema.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": " The function reference.\n",
        "see": [],
        "params": [
          {
            "name": "cfg",
            "description": "The configuration for the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.name - The name of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.description - The description of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.args - The args schema of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.handler - The handler of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.deps - The dependencies of the function.\n\n"
          }
        ],
        "examples": []
      },
      "formattedContent": "export declare function useRuntimeFunction<\n  ArgsSchema extends  s.HashbrownType ,\n>(cfg: {\n  name: string;\n  description: string;\n  deps:  DependencyList ;\n  args: ArgsSchema;\n  handler: (\n    args:  s.Infer <ArgsSchema>,\n    abortSignal?:  AbortSignal ,\n  ) => void |  Promise <void>;\n}):  RuntimeFunctionRef <\n   s.Infer <ArgsSchema>,\n  void\n>;",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "export declare function useRuntimeFunction<\n  ArgsSchema extends "
        },
        {
          "kind": "Reference",
          "text": " s.HashbrownType ",
          "canonicalReference": "!s.HashbrownType:type"
        },
        {
          "kind": "Content",
          "text": ",\n>(cfg: {\n  name: string;\n  description: string;\n  deps: "
        },
        {
          "kind": "Reference",
          "text": " DependencyList ",
          "canonicalReference": "@types/react!React.DependencyList:type"
        },
        {
          "kind": "Content",
          "text": ";\n  args: ArgsSchema;\n  handler: (\n    args: "
        },
        {
          "kind": "Reference",
          "text": " s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <ArgsSchema>,\n    abortSignal?: " },
        {
          "kind": "Reference",
          "text": " AbortSignal ",
          "canonicalReference": "!AbortSignal:interface"
        },
        { "kind": "Content", "text": ",\n  ) => void | " },
        {
          "kind": "Reference",
          "text": " Promise",
          "canonicalReference": "!Promise:interface"
        },
        { "kind": "Content", "text": " <void>;\n}): " },
        { "kind": "Content", "text": " RuntimeFunctionRef" },
        { "kind": "Content", "text": " <\n  " },
        {
          "kind": "Reference",
          "text": " s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <ArgsSchema>,\n  void\n>;" }
      ]
    },
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!useRuntimeFunction:function(4)",
      "docComment": "/**\n * Creates a function without input or output schema.\n *\n * @param cfg - The configuration for the function.\n *\n * @param  - cfg.name - The name of the function.\n *\n * @param  - cfg.description - The description of the function.\n *\n * @param  - cfg.handler - The handler of the function, which returns void or a promise thereof.\n *\n * @param  - cfg.deps - The dependencies of the function.\n *\n * @returns The function reference.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function useRuntimeFunction(cfg: "
        },
        {
          "kind": "Content",
          "text": "{\n    name: string;\n    description: string;\n    deps: "
        },
        {
          "kind": "Reference",
          "text": "DependencyList",
          "canonicalReference": "@types/react!React.DependencyList:type"
        },
        { "kind": "Content", "text": ";\n    handler: (abortSignal?: " },
        {
          "kind": "Reference",
          "text": "AbortSignal",
          "canonicalReference": "!AbortSignal:interface"
        },
        { "kind": "Content", "text": ") => void | " },
        {
          "kind": "Reference",
          "text": "Promise",
          "canonicalReference": "!Promise:interface"
        },
        { "kind": "Content", "text": "<void>;\n}" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "RuntimeFunctionRef",
          "canonicalReference": "!unknown"
        },
        { "kind": "Content", "text": "<null, void>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/src/hooks/use-runtime-function.d.ts",
      "returnTypeTokenRange": { "startIndex": 9, "endIndex": 11 },
      "releaseTag": "Public",
      "overloadIndex": 4,
      "parameters": [
        {
          "parameterName": "cfg",
          "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 8 },
          "isOptional": false
        }
      ],
      "name": "useRuntimeFunction",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Creates a function without input or output schema.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": " The function reference.\n",
        "see": [],
        "params": [
          {
            "name": "cfg",
            "description": "The configuration for the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.name - The name of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.description - The description of the function.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.handler - The handler of the function, which returns void or a promise thereof.\n\n"
          },
          {
            "name": "",
            "description": "  - cfg.deps - The dependencies of the function.\n\n"
          }
        ],
        "examples": []
      },
      "formattedContent": "export declare function useRuntimeFunction(cfg: {\n  name: string;\n  description: string;\n  deps:  DependencyList ;\n  handler: (\n    abortSignal?:  AbortSignal ,\n  ) => void |  Promise <void>;\n}):  RuntimeFunctionRef <null, void>;",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "export declare function useRuntimeFunction(cfg: {\n  name: string;\n  description: string;\n  deps: "
        },
        {
          "kind": "Reference",
          "text": " DependencyList ",
          "canonicalReference": "@types/react!React.DependencyList:type"
        },
        { "kind": "Content", "text": ";\n  handler: (\n    abortSignal?: " },
        {
          "kind": "Reference",
          "text": " AbortSignal ",
          "canonicalReference": "!AbortSignal:interface"
        },
        { "kind": "Content", "text": ",\n  ) => void | " },
        {
          "kind": "Reference",
          "text": " Promise",
          "canonicalReference": "!Promise:interface"
        },
        { "kind": "Content", "text": " <void>;\n}): " },
        { "kind": "Content", "text": " RuntimeFunctionRef" },
        { "kind": "Content", "text": " <null, void>;" }
      ]
    }
  ]
}

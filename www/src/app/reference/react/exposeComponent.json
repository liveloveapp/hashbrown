{
  "name": "exposeComponent",
  "canonicalReference": "@hashbrownai/react!exposeComponent:function",
  "kind": "Function",
  "fileUrlPath": "../dist/packages/react/expose-component.fn.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!exposeComponent:function(1)",
      "docComment": "/**\n * Creates an object used to expose a component for use by the LLM.\n *\n * @returns {ExposedComponent<T>} - An object representing the component in order to expose it to the LLM.\n *\n * @example\n * ```ts\n * exposeComponent(\n *   CardComponent, // The React component to be exposed.\n *   { // The exposed component configuration.\n *     name: 'CardComponent',\n *     description: 'Show a card with children components to the user',\n *     children: 'any',\n *     props: {\n *       title: s.string('The title of the card'),\n *       description: s.streaming.string('The description of the card'),\n *     },\n *   },\n * });\n * ```\n *\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function exposeComponent<T extends "
        },
        {
          "kind": "Reference",
          "text": "ComponentType",
          "canonicalReference": "@types/react!React.ComponentType:type"
        },
        { "kind": "Content", "text": "<any>" },
        { "kind": "Content", "text": ">(\ncomponent: " },
        { "kind": "Content", "text": "T" },
        { "kind": "Content", "text": ", \nconfig: " },
        {
          "kind": "Reference",
          "text": "θtypes.Prettify",
          "canonicalReference": "!θtypes.Prettify:type"
        },
        { "kind": "Content", "text": "<" },
        {
          "kind": "Reference",
          "text": "Omit",
          "canonicalReference": "!Omit:type"
        },
        { "kind": "Content", "text": "<" },
        {
          "kind": "Reference",
          "text": "ExposedComponent",
          "canonicalReference": "@hashbrownai/react!ExposedComponent:interface"
        },
        { "kind": "Content", "text": "<T>, 'component'>>" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "ExposedComponent",
          "canonicalReference": "@hashbrownai/react!ExposedComponent:interface"
        },
        { "kind": "Content", "text": "<T>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/expose-component.fn.d.ts",
      "returnTypeTokenRange": { "startIndex": 13, "endIndex": 15 },
      "releaseTag": "Public",
      "overloadIndex": 1,
      "parameters": [
        {
          "parameterName": "component",
          "parameterTypeTokenRange": { "startIndex": 4, "endIndex": 5 },
          "isOptional": false
        },
        {
          "parameterName": "config",
          "parameterTypeTokenRange": { "startIndex": 6, "endIndex": 12 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "T",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 3 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "exposeComponent",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Creates an object used to expose a component for use by the LLM.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": " {ExposedComponent<T>} - An object representing the component in order to expose it to the LLM.\n\n",
        "see": [],
        "params": [],
        "examples": [
          "\n```ts\nexposeComponent(\n  CardComponent, // The React component to be exposed.\n  { // The exposed component configuration.\n    name: 'CardComponent',\n    description: 'Show a card with children components to the user',\n    children: 'any',\n    props: {\n      title: s.string('The title of the card'),\n      description: s.streaming.string('The description of the card'),\n    },\n  },\n});\n```\n\n"
        ]
      }
    }
  ]
}

{
  "name": "useTool",
  "canonicalReference": "@hashbrownai/react!useTool:function",
  "kind": "Function",
  "fileUrlPath": "../dist/packages/react/src/hooks/use-tool.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!useTool:function(1)",
      "docComment": "/**\n * Creates a tool with a schema.\n *\n * @param input - The input for the tool.\n *\n * @param  - input.name - The name of the tool.\n *\n * @param  - input.description - The description of the tool.\n *\n * @param  - input.schema - The schema of the tool.\n *\n * @param  - input.handler - The handler of the tool.\n *\n * @param deps - Dependencies that should trigger tool recreation. The hook will automatically memoize the handler based on these dependencies, so you can safely pass anonymous functions.\n *\n * @param Name - The name of the tool.\n *\n * @param Schema - The schema of the tool.\n *\n * @param Result - The result of the tool.\n *\n * @returns The tool.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function useTool<const Name extends "
        },
        { "kind": "Content", "text": "string" },
        { "kind": "Content", "text": ", Schema extends " },
        {
          "kind": "Reference",
          "text": "s.HashbrownType",
          "canonicalReference": "!s.HashbrownType:type"
        },
        { "kind": "Content", "text": ", Result>(input: " },
        {
          "kind": "Reference",
          "text": "ToolOptionsWithInput",
          "canonicalReference": "@hashbrownai/react!~ToolOptionsWithInput:interface"
        },
        { "kind": "Content", "text": "<Name, Schema, Result>" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "Chat.Tool",
          "canonicalReference": "!Chat.Tool:type"
        },
        { "kind": "Content", "text": "<Name, " },
        {
          "kind": "Reference",
          "text": "s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": "<Schema>, Result>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/src/hooks/use-tool.d.ts",
      "returnTypeTokenRange": { "startIndex": 8, "endIndex": 12 },
      "releaseTag": "Public",
      "overloadIndex": 1,
      "parameters": [
        {
          "parameterName": "input",
          "parameterTypeTokenRange": { "startIndex": 5, "endIndex": 7 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "Name",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "Schema",
          "constraintTokenRange": { "startIndex": 3, "endIndex": 4 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "Result",
          "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "useTool",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Creates a tool with a schema.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": " The tool.\n",
        "see": [],
        "params": [
          { "name": "input", "description": "The input for the tool.\n\n" },
          {
            "name": "",
            "description": "  - input.name - The name of the tool.\n\n"
          },
          {
            "name": "",
            "description": "  - input.description - The description of the tool.\n\n"
          },
          {
            "name": "",
            "description": "  - input.schema - The schema of the tool.\n\n"
          },
          {
            "name": "",
            "description": "  - input.handler - The handler of the tool.\n\n"
          },
          {
            "name": "deps",
            "description": "Dependencies that should trigger tool recreation. The hook will automatically memoize the handler based on these dependencies, so you can safely pass anonymous functions.\n\n"
          },
          { "name": "Name", "description": "The name of the tool.\n\n" },
          { "name": "Schema", "description": "The schema of the tool.\n\n" },
          { "name": "Result", "description": "The result of the tool.\n\n" }
        ],
        "examples": []
      },
      "formattedContent": "export declare function useTool<\n  const Name extends string,\n  Schema extends  s.HashbrownType ,\n  Result,\n>(\n  input:  ToolOptionsWithInput <Name, Schema, Result>,\n):  Chat.Tool <\n  Name,\n   s.Infer <Schema>,\n  Result\n>;",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "export declare function useTool<\n  const Name extends string,\n  Schema extends "
        },
        {
          "kind": "Reference",
          "text": " s.HashbrownType ",
          "canonicalReference": "!s.HashbrownType:type"
        },
        { "kind": "Content", "text": ",\n  Result,\n>(\n  input: " },
        {
          "kind": "Reference",
          "text": " ToolOptionsWithInput",
          "canonicalReference": "@hashbrownai/react!~ToolOptionsWithInput:interface"
        },
        { "kind": "Content", "text": " <Name, Schema, Result>,\n): " },
        {
          "kind": "Reference",
          "text": " Chat.Tool",
          "canonicalReference": "!Chat.Tool:type"
        },
        { "kind": "Content", "text": " <\n  Name,\n  " },
        {
          "kind": "Reference",
          "text": " s.Infer",
          "canonicalReference": "!s.Infer:type"
        },
        { "kind": "Content", "text": " <Schema>,\n  Result\n>;" }
      ]
    },
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!useTool:function(2)",
      "docComment": "/**\n * Creates a tool with a unknown JSON schema.\n *\n * @param input - The input for the tool.\n *\n * @param  - input.name - The name of the tool.\n *\n * @param  - input.description - The description of the tool.\n *\n * @param  - input.schema - The schema of the tool.\n *\n * @param  - input.handler - The handler of the tool.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function useTool<const Name extends "
        },
        { "kind": "Content", "text": "string" },
        { "kind": "Content", "text": ", Result>(input: " },
        {
          "kind": "Reference",
          "text": "ToolOptionsWithUnknownSchema",
          "canonicalReference": "@hashbrownai/react!~ToolOptionsWithUnknownSchema:interface"
        },
        { "kind": "Content", "text": "<Name, Result>" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "Chat.Tool",
          "canonicalReference": "!Chat.Tool:type"
        },
        { "kind": "Content", "text": "<Name, any, Result>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/src/hooks/use-tool.d.ts",
      "returnTypeTokenRange": { "startIndex": 6, "endIndex": 8 },
      "releaseTag": "Public",
      "overloadIndex": 2,
      "parameters": [
        {
          "parameterName": "input",
          "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 5 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "Name",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "Result",
          "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "useTool",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Creates a tool with a unknown JSON schema.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [
          { "name": "input", "description": "The input for the tool.\n\n" },
          {
            "name": "",
            "description": "  - input.name - The name of the tool.\n\n"
          },
          {
            "name": "",
            "description": "  - input.description - The description of the tool.\n\n"
          },
          {
            "name": "",
            "description": "  - input.schema - The schema of the tool.\n\n"
          },
          {
            "name": "",
            "description": "  - input.handler - The handler of the tool.\n"
          }
        ],
        "examples": []
      },
      "formattedContent": "export declare function useTool<const Name extends string, Result>(\n  input:  ToolOptionsWithUnknownSchema <Name, Result>,\n):  Chat.Tool <Name, any, Result>;",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "export declare function useTool<const Name extends string, Result>(\n  input: "
        },
        {
          "kind": "Reference",
          "text": " ToolOptionsWithUnknownSchema",
          "canonicalReference": "@hashbrownai/react!~ToolOptionsWithUnknownSchema:interface"
        },
        { "kind": "Content", "text": " <Name, Result>,\n): " },
        {
          "kind": "Reference",
          "text": " Chat.Tool",
          "canonicalReference": "!Chat.Tool:type"
        },
        { "kind": "Content", "text": " <Name, any, Result>;" }
      ]
    },
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!useTool:function(3)",
      "docComment": "/**\n * Creates a tool.\n *\n * @param input - The input for the tool.\n *\n * @param  - input.name - The name of the tool.\n *\n * @param  - input.description - The description of the tool.\n *\n * @param  - input.schema - The schema of the tool.\n *\n * @param  - input.handler - The handler of the tool.\n *\n * @param deps - Dependencies that should trigger tool recreation. The hook will automatically memoize the handler based on these dependencies, so you can safely pass anonymous functions.\n *\n * @param Name - The name of the tool.\n *\n * @param Schema - The schema of the tool.\n *\n * @param Result - The result of the tool.\n *\n * @returns The tool.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function useTool<const Name extends "
        },
        { "kind": "Content", "text": "string" },
        { "kind": "Content", "text": ", Result>(input: " },
        {
          "kind": "Reference",
          "text": "ToolOptionsWithoutInput",
          "canonicalReference": "@hashbrownai/react!~ToolOptionsWithoutInput:interface"
        },
        { "kind": "Content", "text": "<Name, Result>" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "Chat.Tool",
          "canonicalReference": "!Chat.Tool:type"
        },
        { "kind": "Content", "text": "<Name, void, Result>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/src/hooks/use-tool.d.ts",
      "returnTypeTokenRange": { "startIndex": 6, "endIndex": 8 },
      "releaseTag": "Public",
      "overloadIndex": 3,
      "parameters": [
        {
          "parameterName": "input",
          "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 5 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "Name",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "Result",
          "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "useTool",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Creates a tool.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": " The tool.\n",
        "see": [],
        "params": [
          { "name": "input", "description": "The input for the tool.\n\n" },
          {
            "name": "",
            "description": "  - input.name - The name of the tool.\n\n"
          },
          {
            "name": "",
            "description": "  - input.description - The description of the tool.\n\n"
          },
          {
            "name": "",
            "description": "  - input.schema - The schema of the tool.\n\n"
          },
          {
            "name": "",
            "description": "  - input.handler - The handler of the tool.\n\n"
          },
          {
            "name": "deps",
            "description": "Dependencies that should trigger tool recreation. The hook will automatically memoize the handler based on these dependencies, so you can safely pass anonymous functions.\n\n"
          },
          { "name": "Name", "description": "The name of the tool.\n\n" },
          { "name": "Schema", "description": "The schema of the tool.\n\n" },
          { "name": "Result", "description": "The result of the tool.\n\n" }
        ],
        "examples": []
      },
      "formattedContent": "export declare function useTool<const Name extends string, Result>(\n  input:  ToolOptionsWithoutInput <Name, Result>,\n):  Chat.Tool <Name, void, Result>;",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "export declare function useTool<const Name extends string, Result>(\n  input: "
        },
        {
          "kind": "Reference",
          "text": " ToolOptionsWithoutInput",
          "canonicalReference": "@hashbrownai/react!~ToolOptionsWithoutInput:interface"
        },
        { "kind": "Content", "text": " <Name, Result>,\n): " },
        {
          "kind": "Reference",
          "text": " Chat.Tool",
          "canonicalReference": "!Chat.Tool:type"
        },
        { "kind": "Content", "text": " <Name, void, Result>;" }
      ]
    },
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/react!useTool:function(4)",
      "docComment": "",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function useTool<const Name extends "
        },
        { "kind": "Content", "text": "string" },
        { "kind": "Content", "text": ", Result>(input: " },
        {
          "kind": "Reference",
          "text": "ToolOptionsWithUnknownSchema",
          "canonicalReference": "@hashbrownai/react!~ToolOptionsWithUnknownSchema:interface"
        },
        { "kind": "Content", "text": "<Name, Result>" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "Chat.Tool",
          "canonicalReference": "!Chat.Tool:type"
        },
        { "kind": "Content", "text": "<Name, any, Result>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/react/src/hooks/use-tool.d.ts",
      "returnTypeTokenRange": { "startIndex": 6, "endIndex": 8 },
      "releaseTag": "Public",
      "overloadIndex": 4,
      "parameters": [
        {
          "parameterName": "input",
          "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 5 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "Name",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "Result",
          "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "useTool",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [],
        "examples": []
      },
      "formattedContent": "export declare function useTool<const Name extends string, Result>(\n  input:  ToolOptionsWithUnknownSchema <Name, Result>,\n):  Chat.Tool <Name, any, Result>;",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "export declare function useTool<const Name extends string, Result>(\n  input: "
        },
        {
          "kind": "Reference",
          "text": " ToolOptionsWithUnknownSchema",
          "canonicalReference": "@hashbrownai/react!~ToolOptionsWithUnknownSchema:interface"
        },
        { "kind": "Content", "text": " <Name, Result>,\n): " },
        {
          "kind": "Reference",
          "text": " Chat.Tool",
          "canonicalReference": "!Chat.Tool:type"
        },
        { "kind": "Content", "text": " <Name, any, Result>;" }
      ]
    }
  ]
}

{
  "name": "ExposedComponent",
  "canonicalReference": "@hashbrownai/react!ExposedComponent:interface",
  "kind": "Interface",
  "fileUrlPath": "../dist/packages/react/src/expose-component.fn.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Interface",
      "canonicalReference": "@hashbrownai/react!ExposedComponent:interface",
      "docComment": "/**\n * This type defines the configuration for a component to be exposed to the chat.\n *\n * @example\n * ```ts\n * exposeComponent(CardComponent, {\n *   name: 'CardComponent',\n *   description: 'Show a card with children components to the user',\n *   children: 'any',\n *   props: {\n *     title: s.string('The title of the card'),\n *     description: s.streaming.string('The description of the card'),\n *   },\n * });\n * ```\n *\n * @public\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export interface ExposedComponent<T extends "
        },
        {
          "kind": "Reference",
          "text": "ComponentType",
          "canonicalReference": "@types/react!React.ComponentType:type"
        },
        { "kind": "Content", "text": "<any>" },
        { "kind": "Content", "text": "> " }
      ],
      "fileUrlPath": "../dist/packages/react/src/expose-component.fn.d.ts",
      "releaseTag": "Public",
      "typeParameters": [
        {
          "typeParameterName": "T",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 3 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "ExposedComponent",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/react!ExposedComponent#children:member",
          "docComment": "/**\n * The children of the component.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "children?: " },
            { "kind": "Content", "text": "'any' | 'text' | " },
            {
              "kind": "Reference",
              "text": "ExposedComponent",
              "canonicalReference": "@hashbrownai/react!ExposedComponent:interface"
            },
            { "kind": "Content", "text": "<any>[] | false" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": true,
          "releaseTag": "Public",
          "name": "children",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 4 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "The children of the component.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "children?: 'any' | 'text' | ExposedComponent<any>[] | false;",
          "overlayTokens": [
            { "kind": "Content", "text": "children?: 'any' | 'text' | " },
            {
              "kind": "Reference",
              "text": "ExposedComponent",
              "canonicalReference": "@hashbrownai/react!ExposedComponent:interface"
            },
            { "kind": "Content", "text": "<any>[] | false;" }
          ]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/react!ExposedComponent#component:member",
          "docComment": "/**\n * The component to be exposed.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "component: " },
            { "kind": "Content", "text": "T" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "component",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "The component to be exposed.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "component: T;",
          "overlayTokens": [{ "kind": "Content", "text": "component: T;" }]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/react!ExposedComponent#description:member",
          "docComment": "/**\n * The description of the component. This is also used by the LLM to understand when to use the component.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "description: " },
            { "kind": "Content", "text": "string" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "description",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "The description of the component. This is also used by the LLM to understand when to use the component.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "description: string;",
          "overlayTokens": [
            { "kind": "Content", "text": "description: string;" }
          ]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/react!ExposedComponent#name:member",
          "docComment": "/**\n * The name of the component.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "name: " },
            { "kind": "Content", "text": "string" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "name",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "The name of the component.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "name: string;",
          "overlayTokens": [{ "kind": "Content", "text": "name: string;" }]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/react!ExposedComponent#props:member",
          "docComment": "/**\n * The schema describing the props for this component.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "props?: " },
            {
              "kind": "Reference",
              "text": "ComponentPropSchema",
              "canonicalReference": "@hashbrownai/react!ComponentPropSchema:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": true,
          "releaseTag": "Public",
          "name": "props",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "The schema describing the props for this component.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "props?: ComponentPropSchema<T>;",
          "overlayTokens": [
            { "kind": "Content", "text": "props?: " },
            {
              "kind": "Reference",
              "text": "ComponentPropSchema",
              "canonicalReference": "@hashbrownai/react!ComponentPropSchema:type"
            },
            { "kind": "Content", "text": "<T>;" }
          ]
        }
      ],
      "extendsTokenRanges": [],
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": true,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "This type defines the configuration for a component to be exposed to the chat.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [],
        "examples": [
          "\n```ts\nexposeComponent(CardComponent, {\n  name: 'CardComponent',\n  description: 'Show a card with children components to the user',\n  children: 'any',\n  props: {\n    title: s.string('The title of the card'),\n    description: s.streaming.string('The description of the card'),\n  },\n});\n```\n\n\n"
        ]
      },
      "formattedContent": "export interface ExposedComponent<T extends ComponentType<any>>",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "export interface ExposedComponent<T extends "
        },
        {
          "kind": "Reference",
          "text": "ComponentType",
          "canonicalReference": "@types/react!React.ComponentType:type"
        },
        { "kind": "Content", "text": "<any>>" }
      ]
    }
  ]
}

{
  "name": "ProvideHashbrownOptions",
  "canonicalReference": "@hashbrownai/angular!ProvideHashbrownOptions:interface",
  "kind": "Interface",
  "fileUrlPath": "../dist/packages/angular/index.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Interface",
      "canonicalReference": "@hashbrownai/angular!ProvideHashbrownOptions:interface",
      "docComment": "/**\n * Hashbrown must be configured with a base URL, and may optionally include middleware and a flag to emulate structured output.\n *\n * @public\n */\n",
      "excerptTokens": [
        { "kind": "Content", "text": "interface ProvideHashbrownOptions " }
      ],
      "fileUrlPath": "../dist/packages/angular/index.d.ts",
      "releaseTag": "Public",
      "name": "ProvideHashbrownOptions",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!ProvideHashbrownOptions#baseUrl:member",
          "docComment": "/**\n * The base URL of the Hashbrown API.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "baseUrl: " },
            { "kind": "Content", "text": "string" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "baseUrl",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "The base URL of the Hashbrown API.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "baseUrl: string;",
          "overlayTokens": [{ "kind": "Content", "text": "baseUrl: string;" }]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!ProvideHashbrownOptions#emulateStructuredOutput:member",
          "docComment": "/**\n * Whether to emulate structured output. Useful for models that don't support tool calling with structured outputs enabled. When set to true, Hashbrown silently adds an \"output\" tool to the the list of tools the model can call, and then handles the arguments to the tool call as if the model has produced it via structured outputs.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "emulateStructuredOutput?: " },
            { "kind": "Content", "text": "boolean" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": true,
          "releaseTag": "Public",
          "name": "emulateStructuredOutput",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Whether to emulate structured output. Useful for models that don't support tool calling with structured outputs enabled. When set to true, Hashbrown silently adds an \"output\" tool to the the list of tools the model can call, and then handles the arguments to the tool call as if the model has produced it via structured outputs.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "emulateStructuredOutput?: boolean;",
          "overlayTokens": [
            { "kind": "Content", "text": "emulateStructuredOutput?: boolean;" }
          ]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!ProvideHashbrownOptions#middleware:member",
          "docComment": "/**\n * Middleware to apply to all requests.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "middleware?: " },
            {
              "kind": "Reference",
              "text": "Chat.Middleware",
              "canonicalReference": "@hashbrownai/angular!~Middleware:type"
            },
            { "kind": "Content", "text": "[]" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": true,
          "releaseTag": "Public",
          "name": "middleware",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Middleware to apply to all requests.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "middleware?: Chat.Middleware[];",
          "overlayTokens": [
            { "kind": "Content", "text": "middleware?: " },
            {
              "kind": "Reference",
              "text": "Chat.Middleware",
              "canonicalReference": "@hashbrownai/angular!~Middleware:type"
            },
            { "kind": "Content", "text": "[];" }
          ]
        }
      ],
      "extendsTokenRanges": [],
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": true,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Hashbrown must be configured with a base URL, and may optionally include middleware and a flag to emulate structured output.\n\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [],
        "examples": []
      },
      "formattedContent": "interface ProvideHashbrownOptions",
      "overlayTokens": [
        { "kind": "Content", "text": "interface ProvideHashbrownOptions" }
      ]
    }
  ]
}

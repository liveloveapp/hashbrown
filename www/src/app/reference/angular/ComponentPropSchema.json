{
  "name": "ComponentPropSchema",
  "canonicalReference": "@hashbrownai/angular!ComponentPropSchema:type",
  "kind": "TypeAlias",
  "fileUrlPath": "../dist/packages/angular/index.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "TypeAlias",
      "canonicalReference": "@hashbrownai/angular!ComponentPropSchema:type",
      "docComment": "/**\n * @public\n */\n",
      "excerptTokens": [
        { "kind": "Content", "text": "type ComponentPropSchema<T> = " },
        {
          "kind": "Reference",
          "text": "_types.Prettify",
          "canonicalReference": "@hashbrownai/angular!~Prettify:type"
        },
        {
          "kind": "Content",
          "text": "<T extends {\n    new (...args: any[]): infer P;\n} ? {\n    [K in keyof P]?: P[K] extends "
        },
        {
          "kind": "Reference",
          "text": "AngularSignalLike",
          "canonicalReference": "@hashbrownai/angular!AngularSignalLike:type"
        },
        { "kind": "Content", "text": "<infer U> ? " },
        {
          "kind": "Reference",
          "text": "s.Schema",
          "canonicalReference": "@hashbrownai/angular!~Schema:type"
        },
        { "kind": "Content", "text": "<U> : " },
        {
          "kind": "Reference",
          "text": "s.Schema",
          "canonicalReference": "@hashbrownai/angular!~Schema:type"
        },
        { "kind": "Content", "text": "<P[K]>;\n} : never>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/angular/index.d.ts",
      "releaseTag": "Public",
      "name": "ComponentPropSchema",
      "typeParameters": [
        {
          "typeParameterName": "T",
          "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "typeTokenRange": { "startIndex": 1, "endIndex": 9 },
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": true,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [],
        "examples": []
      },
      "formattedContent": "type ComponentPropSchema<T> =  _types.Prettify <\n  T extends {\n    new (...args: any[]): infer P;\n  }\n    ? {\n        [K in keyof P]?: P[K] extends  AngularSignalLike <\n          infer U\n        >\n          ?  s.Schema <U>\n          :  s.Schema <P[K]>;\n      }\n    : never\n>;",
      "overlayTokens": [
        { "kind": "Content", "text": "type ComponentPropSchema<T> = " },
        {
          "kind": "Reference",
          "text": " _types.Prettify",
          "canonicalReference": "@hashbrownai/angular!~Prettify:type"
        },
        {
          "kind": "Content",
          "text": " <\n  T extends {\n    new (...args: any[]): infer P;\n  }\n    ? {\n        [K in keyof P]?: P[K] extends "
        },
        {
          "kind": "Reference",
          "text": " AngularSignalLike",
          "canonicalReference": "@hashbrownai/angular!AngularSignalLike:type"
        },
        {
          "kind": "Content",
          "text": " <\n          infer U\n        >\n          ? "
        },
        {
          "kind": "Reference",
          "text": " s.Schema",
          "canonicalReference": "@hashbrownai/angular!~Schema:type"
        },
        { "kind": "Content", "text": " <U>\n          : " },
        {
          "kind": "Reference",
          "text": " s.Schema",
          "canonicalReference": "@hashbrownai/angular!~Schema:type"
        },
        { "kind": "Content", "text": " <P[K]>;\n      }\n    : never\n>;" }
      ]
    }
  ]
}

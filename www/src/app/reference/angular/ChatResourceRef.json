{
  "name": "ChatResourceRef",
  "canonicalReference": "@hashbrownai/angular!ChatResourceRef:interface",
  "kind": "Interface",
  "fileUrlPath": "../dist/packages/angular/index.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Interface",
      "canonicalReference": "@hashbrownai/angular!ChatResourceRef:interface",
      "docComment": "/**\n * Represents the reactive chat resource, including current messages and control methods.\n *\n * @interface ChatResourceRef  @template Tools  @extends {Resource<Chat.Message<string, Tools>[]>}  @property {(message: Chat.UserMessage) => void} sendMessage - Send a new user message to the chat.  @property {() => boolean} reload - Remove the last assistant response and re-send the previous user message. Returns true if a reload was performed.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "interface ChatResourceRef<Tools extends "
        },
        {
          "kind": "Reference",
          "text": "Chat.AnyTool",
          "canonicalReference": "!Chat.AnyTool:type"
        },
        { "kind": "Content", "text": "> extends " },
        {
          "kind": "Reference",
          "text": "Resource",
          "canonicalReference": "@angular/core!Resource:interface"
        },
        { "kind": "Content", "text": "<" },
        {
          "kind": "Reference",
          "text": "Chat.Message",
          "canonicalReference": "!Chat.Message:type"
        },
        { "kind": "Content", "text": "<string, Tools>[]>" },
        { "kind": "Content", "text": " " }
      ],
      "fileUrlPath": "../dist/packages/angular/index.d.ts",
      "releaseTag": "Public",
      "typeParameters": [
        {
          "typeParameterName": "Tools",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "ChatResourceRef",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!ChatResourceRef#reload:member",
          "docComment": "",
          "excerptTokens": [
            { "kind": "Content", "text": "reload: " },
            { "kind": "Content", "text": "() => boolean" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "reload",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          }
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!ChatResourceRef#sendMessage:member",
          "docComment": "",
          "excerptTokens": [
            { "kind": "Content", "text": "sendMessage: " },
            { "kind": "Content", "text": "(message: " },
            {
              "kind": "Reference",
              "text": "Chat.UserMessage",
              "canonicalReference": "!Chat.UserMessage:type"
            },
            { "kind": "Content", "text": ") => void" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "sendMessage",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 4 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          }
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!ChatResourceRef#stop:member",
          "docComment": "/**\n * Stops any currently-streaming message.\n *\n * @param clearStreamingMessage - Whether the currently-streaming message should be removed from state.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "stop: " },
            {
              "kind": "Content",
              "text": "(clearStreamingMessage?: boolean) => void"
            },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "stop",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Stops any currently-streaming message.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "clearStreamingMessage",
                "description": "Whether the currently-streaming message should be removed from state.\n"
              }
            ],
            "examples": []
          }
        }
      ],
      "extendsTokenRanges": [{ "startIndex": 3, "endIndex": 7 }],
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Represents the reactive chat resource, including current messages and control methods.\n\n@interface ChatResourceRef  @template Tools  @extends {Resource<Chat.Message<string, Tools>[]>}  @property {(message: Chat.UserMessage) => void} sendMessage - Send a new user message to the chat.  @property {() => boolean} reload - Remove the last assistant response and re-send the previous user message. Returns true if a reload was performed.\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [],
        "examples": []
      }
    }
  ]
}

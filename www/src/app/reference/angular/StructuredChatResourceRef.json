{
  "name": "StructuredChatResourceRef",
  "canonicalReference": "@hashbrownai/angular!StructuredChatResourceRef:interface",
  "kind": "Interface",
  "fileUrlPath": "../dist/packages/angular/index.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Interface",
      "canonicalReference": "@hashbrownai/angular!StructuredChatResourceRef:interface",
      "docComment": "/**\n * A reference to the structured chat resource.\n *\n * @typeParam Output - The type of the output from the chat.\n *\n * @typeParam Tools - The set of tool definitions available to the chat.\n *\n * @public\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "interface StructuredChatResourceRef<Output, Tools extends "
        },
        {
          "kind": "Reference",
          "text": "Chat.AnyTool",
          "canonicalReference": "@hashbrownai/angular!~AnyTool:type"
        },
        { "kind": "Content", "text": "> extends " },
        {
          "kind": "Reference",
          "text": "Resource",
          "canonicalReference": "@angular/core!Resource:interface"
        },
        { "kind": "Content", "text": "<" },
        {
          "kind": "Reference",
          "text": "Chat.Message",
          "canonicalReference": "@hashbrownai/angular!~Message_3:type"
        },
        { "kind": "Content", "text": "<Output, Tools>[]>" },
        { "kind": "Content", "text": " " }
      ],
      "fileUrlPath": "../dist/packages/angular/index.d.ts",
      "releaseTag": "Public",
      "typeParameters": [
        {
          "typeParameterName": "Output",
          "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "Tools",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "StructuredChatResourceRef",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!StructuredChatResourceRef#lastAssistantMessage:member",
          "docComment": "",
          "excerptTokens": [
            { "kind": "Content", "text": "lastAssistantMessage: " },
            {
              "kind": "Reference",
              "text": "Signal",
              "canonicalReference": "@angular/core!Signal:type"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "Chat.AssistantMessage",
              "canonicalReference": "@hashbrownai/angular!~AssistantMessage_3:interface"
            },
            { "kind": "Content", "text": "<Output, Tools> | undefined>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "lastAssistantMessage",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "lastAssistantMessage:  Signal <\n   Chat.AssistantMessage <Output, Tools> | undefined\n>;",
          "overlayTokens": [
            { "kind": "Content", "text": "lastAssistantMessage: " },
            {
              "kind": "Reference",
              "text": " Signal",
              "canonicalReference": "@angular/core!Signal:type"
            },
            { "kind": "Content", "text": " <\n  " },
            {
              "kind": "Reference",
              "text": " Chat.AssistantMessage",
              "canonicalReference": "@hashbrownai/angular!~AssistantMessage_3:interface"
            },
            { "kind": "Content", "text": " <Output, Tools> | undefined\n>;" }
          ]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!StructuredChatResourceRef#reload:member",
          "docComment": "/**\n * Remove the last assistant response and re-send the previous user message. Returns true if a reload was performed.\n *\n * @returns Whether the resource was reloaded.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "reload: " },
            { "kind": "Content", "text": "() => boolean" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "reload",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Remove the last assistant response and re-send the previous user message. Returns true if a reload was performed.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Whether the resource was reloaded.\n",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "reload: () => boolean;",
          "overlayTokens": [
            { "kind": "Content", "text": "reload: () => boolean;" }
          ]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!StructuredChatResourceRef#resendMessages:member",
          "docComment": "/**\n * Cause current messages to be resent. Can be used after an error in chat.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "resendMessages: " },
            { "kind": "Content", "text": "() => void" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "resendMessages",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Cause current messages to be resent. Can be used after an error in chat.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [],
            "examples": []
          },
          "formattedContent": "resendMessages: () => void;",
          "overlayTokens": [
            { "kind": "Content", "text": "resendMessages: () => void;" }
          ]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!StructuredChatResourceRef#sendMessage:member",
          "docComment": "/**\n * Send a new user message to the chat.\n *\n * @param message - The user message to send.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "sendMessage: " },
            { "kind": "Content", "text": "(message: " },
            {
              "kind": "Reference",
              "text": "Chat.UserMessage",
              "canonicalReference": "@hashbrownai/angular!~UserMessage_3:type"
            },
            { "kind": "Content", "text": ") => void" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "sendMessage",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 4 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Send a new user message to the chat.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "message",
                "description": "The user message to send.\n"
              }
            ],
            "examples": []
          },
          "formattedContent": "sendMessage: (message: Chat.UserMessage) => void;",
          "overlayTokens": [
            { "kind": "Content", "text": "sendMessage: (message: " },
            {
              "kind": "Reference",
              "text": "Chat.UserMessage",
              "canonicalReference": "@hashbrownai/angular!~UserMessage_3:type"
            },
            { "kind": "Content", "text": ") => void;" }
          ]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!StructuredChatResourceRef#setMessages:member",
          "docComment": "/**\n * Update the chat messages.\n *\n * @param messages - The new array of chat messages.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "setMessages: " },
            { "kind": "Content", "text": "(messages: " },
            {
              "kind": "Reference",
              "text": "Chat.Message",
              "canonicalReference": "@hashbrownai/angular!~Message_3:type"
            },
            { "kind": "Content", "text": "<Output, Tools>[]) => void" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "setMessages",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 4 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Update the chat messages.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "messages",
                "description": "The new array of chat messages.\n"
              }
            ],
            "examples": []
          },
          "formattedContent": "setMessages: (messages: Chat.Message<Output, Tools>[]) => void;",
          "overlayTokens": [
            { "kind": "Content", "text": "setMessages: (messages: " },
            {
              "kind": "Reference",
              "text": "Chat.Message",
              "canonicalReference": "@hashbrownai/angular!~Message_3:type"
            },
            { "kind": "Content", "text": "<Output, Tools>[]) => void;" }
          ]
        },
        {
          "kind": "PropertySignature",
          "canonicalReference": "@hashbrownai/angular!StructuredChatResourceRef#stop:member",
          "docComment": "/**\n * Stops any currently-streaming message.\n *\n * @param clearStreamingMessage - Whether the currently-streaming message should be removed from state.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "stop: " },
            {
              "kind": "Content",
              "text": "(clearStreamingMessage?: boolean) => void"
            },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "stop",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Stops any currently-streaming message.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "clearStreamingMessage",
                "description": "Whether the currently-streaming message should be removed from state.\n"
              }
            ],
            "examples": []
          },
          "formattedContent": "stop: (clearStreamingMessage?: boolean) => void;",
          "overlayTokens": [
            {
              "kind": "Content",
              "text": "stop: (clearStreamingMessage?: boolean) => void;"
            }
          ]
        }
      ],
      "extendsTokenRanges": [{ "startIndex": 3, "endIndex": 7 }],
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": true,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "A reference to the structured chat resource.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [],
        "examples": []
      },
      "formattedContent": "interface StructuredChatResourceRef<Output, Tools extends Chat.AnyTool> extends Resource<Chat.Message<Output, Tools>[]>",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "interface StructuredChatResourceRef<Output, Tools extends "
        },
        {
          "kind": "Reference",
          "text": "Chat.AnyTool",
          "canonicalReference": "@hashbrownai/angular!~AnyTool:type"
        },
        { "kind": "Content", "text": "> extends " },
        {
          "kind": "Reference",
          "text": "Resource",
          "canonicalReference": "@angular/core!Resource:interface"
        },
        { "kind": "Content", "text": "<" },
        {
          "kind": "Reference",
          "text": "Chat.Message",
          "canonicalReference": "@hashbrownai/angular!~Message_3:type"
        },
        { "kind": "Content", "text": "<Output, Tools>[]>" }
      ]
    }
  ]
}

{
  "name": "chatResource",
  "canonicalReference": "@hashbrownai/angular!chatResource:function",
  "kind": "Function",
  "fileUrlPath": "../dist/packages/angular/index.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Function",
      "canonicalReference": "@hashbrownai/angular!chatResource:function(1)",
      "docComment": "/**\n * This Angular resource provides a reactive chat interface for send and receiving messages from a model. The resource-based API includes signals for the current messages, status, and control methods for sending and stopping messages.\n *\n * @remarks\n *\n * The `chatResource` function provides the most basic functionality for un-structured chats. Unstructured chats include things like general chats and natural language controls.\n *\n * @param options - Configuration for the chat resource.\n *\n * @typeParam Tools - The set of tool definitions available to the chat.\n *\n * @returns An object with reactive signals and methods for interacting with the chat.\n *\n * @example\n *\n * This example demonstrates how to use the `chatResource` function to create a simple chat component.\n * ```ts\n * const chat = chatResource({\n *   system: 'hashbrowns should be covered and smothered',\n *   model: 'gpt-5',\n * });\n *\n * chat.sendMessage(\\{ role: 'user', content: 'Write a short story about breakfast.' \\});\n * ```\n *\n * @public\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "declare function chatResource<Tools extends "
        },
        {
          "kind": "Reference",
          "text": "Chat.AnyTool",
          "canonicalReference": "@hashbrownai/angular!~AnyTool:type"
        },
        { "kind": "Content", "text": ">(options: " },
        {
          "kind": "Reference",
          "text": "ChatResourceOptions",
          "canonicalReference": "@hashbrownai/angular!ChatResourceOptions:interface"
        },
        { "kind": "Content", "text": "<Tools>" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "ChatResourceRef",
          "canonicalReference": "@hashbrownai/angular!ChatResourceRef:interface"
        },
        { "kind": "Content", "text": "<Tools>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../dist/packages/angular/index.d.ts",
      "returnTypeTokenRange": { "startIndex": 6, "endIndex": 8 },
      "releaseTag": "Public",
      "overloadIndex": 1,
      "parameters": [
        {
          "parameterName": "options",
          "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 5 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "Tools",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "chatResource",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": true,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "This Angular resource provides a reactive chat interface for send and receiving messages from a model. The resource-based API includes signals for the current messages, status, and control methods for sending and stopping messages.\n\n",
        "usageNotes": "",
        "remarks": "\n\nThe `chatResource` function provides the most basic functionality for un-structured chats. Unstructured chats include things like general chats and natural language controls.\n\n",
        "deprecated": "",
        "returns": " An object with reactive signals and methods for interacting with the chat.\n\n",
        "see": [],
        "params": [
          {
            "name": "options",
            "description": "Configuration for the chat resource.\n\n"
          }
        ],
        "examples": [
          "\n\nThis example demonstrates how to use the `chatResource` function to create a simple chat component.\n```ts\nconst chat = chatResource({\n  system: 'hashbrowns should be covered and smothered',\n  model: 'gpt-5',\n});\n\nchat.sendMessage(\\{ role: 'user', content: 'Write a short story about breakfast.' \\});\n```\n\n\n"
        ]
      },
      "formattedContent": "declare function chatResource<\n  Tools extends  Chat.AnyTool ,\n>(\n  options:  ChatResourceOptions <Tools>,\n):  ChatResourceRef <Tools>;",
      "overlayTokens": [
        {
          "kind": "Content",
          "text": "declare function chatResource<\n  Tools extends "
        },
        {
          "kind": "Reference",
          "text": " Chat.AnyTool ",
          "canonicalReference": "@hashbrownai/angular!~AnyTool:type"
        },
        { "kind": "Content", "text": ",\n>(\n  options: " },
        {
          "kind": "Reference",
          "text": " ChatResourceOptions",
          "canonicalReference": "@hashbrownai/angular!ChatResourceOptions:interface"
        },
        { "kind": "Content", "text": " <Tools>,\n): " },
        {
          "kind": "Reference",
          "text": " ChatResourceRef",
          "canonicalReference": "@hashbrownai/angular!ChatResourceRef:interface"
        },
        { "kind": "Content", "text": " <Tools>;" }
      ]
    }
  ]
}

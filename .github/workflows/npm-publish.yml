name: NPM Publish

on:
  push:
    tags:
      - npm/preview
      - npm/latest

permissions:
  contents: write

concurrency:
  group: npm-publish
  cancel-in-progress: true

jobs:
  publish:
    name: Publish packages to npm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
          registry-url: https://registry.npmjs.org
          cache: npm

      - name: Configure npm auth token
        run: npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}

      - name: Determine affected base
        uses: nrwl/nx-set-shas@v3

      - name: Install dependencies
        run: npm ci

      - name: Determine release channel
        id: channel
        run: |
          case "${GITHUB_REF_NAME}" in
            npm/preview)
              echo "dist_tag=next" >> "$GITHUB_OUTPUT"
              echo "create_release=false" >> "$GITHUB_OUTPUT"
              ;;
            npm/latest)
              echo "dist_tag=latest" >> "$GITHUB_OUTPUT"
              echo "create_release=true" >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "dist_tag=latest" >> "$GITHUB_OUTPUT"
              echo "create_release=false" >> "$GITHUB_OUTPUT"
              ;;
          esac

      - name: Lint and test affected projects
        run: npx nx affected -t lint,test --parallel=3

      - name: Publish packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx nx release publish --tag=${{ steps.channel.outputs.dist_tag }}

      - name: Create GitHub release
        if: steps.channel.outputs.create_release == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const tagName = context.ref.replace('refs/tags/', '');
            const releaseName = `Hashbrown npm latest (${tagName})`;

            try {
              await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tagName,
                name: releaseName,
                body: 'Automated npm publish triggered by tag push.',
                draft: false,
                prerelease: false,
              });
            } catch (error) {
              if (error.status === 422) {
                core.warning('Release already exists for this tag; skipping creation.');
                return;
              }
              throw error;
            }
